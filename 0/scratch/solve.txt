#include "ns3/core-module.h"
#include "ns3/mobility-module.h"
#include "ns3/netanim-module.h"
#include "ns3/command-line.h"
#include "ns3/string.h"
#include <ns3/log.h>
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "math.h"

using namespace ns3;
NS_LOG_COMPONENT_DEFINE ("solve");

int main (int argc, char *argv[])
{
  CommandLine cmd;
  cmd.Parse (argc, argv);
  LogComponentEnable("solve",LOG_LEVEL_INFO);

//一元四次方程的5个参数
  double a=2;
  double b=3;
  double c=2;
  double d=2;
  double e=2;
//解,值考虑实数解
  double x[4]={100000,100000,100000,100000};

  int flag=-1; // 最小的正实数解下标
//1. y三个重根c/3a
  if ( (3*b*b==8*a*c) && (c*c==36*a*e) && (b*c==6*a*d))
     {
	x[0] = (-b)/(4*a);
	x[1] = (-b)/(4*a);
	x[2] = (-b)/(4*a);
	x[3] = (-b)/(4*a);
        flag = 0;
     }
//2. y有至少一个根，使得(*)式右边为0
  else if ((b*b*b-4*a*b*c+8*a*a*d == 0) && (b*b*b*b-8*a*b*b*c+16*a*a*c*c-64*a*a*a*e == 0))
     {
        double delta = 3*b*b-8*a*c;
	if (delta >= 0)//有实根
	{
	   x[0] = (-b+sqrt(delta))/(4*a);
	   x[1] = (-b+sqrt(delta))/(4*a);
	   x[2] = (-b-sqrt(delta))/(4*a);
	   x[3] = (-b-sqrt(delta))/(4*a);
	   if (x[2] > 0)
	   {
	      flag = 2;
	   }
	   else if (x[0] > 0)
	   {
	      flag = 0;
           }
	   else 
	   {
	      flag = -1;
           }
	}
	else
 	{
	   flag = -1;
        }   
     }
  // 存在y使得m=k=0 但(*)式右边不为0
  else if (b*b*b-4*a*b*c+8*a*a*d == 0)
     {
	double delta1 = b*b*b*b-8*a*b*b*c+16*a*a*c*c-64*a*a*a*e;
	if (delta1 >= 0)//有实数解
	{
	   double delta2 = 3*b*b-8*a*c;
	   if (delta2 - 2*sqrt(delta1) >= 0)//有四个实数解
	   {
	       x[0] = (-b+sqrt(delta2 + 2*sqrt(delta1)))/(4*a);
	       x[1] = (-b+sqrt(delta2 + 2*sqrt(delta1)))/(4*a);
	       x[2] = (-b-sqrt(delta2 - 2*sqrt(delta1)))/(4*a);
	       x[3] = (-b-sqrt(delta2 - 2*sqrt(delta1)))/(4*a);
	       if (x[2] > 0)
	       {
	           flag = 2;
	       }
	       else if (x[0] > 0)
	       {
	           flag = 0;
	       }
	       else
	       {
	           flag = -1;
	       }
	   }
	   else if (delta2 + 2*sqrt(delta1) >= 0)
	   {
	       x[0] = (-b+sqrt(delta2 + 2*sqrt(delta1)))/(4*a);
	       x[1] = (-b+sqrt(delta2 + 2*sqrt(delta1)))/(4*a);
	       if (x[0] > 0)
	       {
	           flag = 0;
	       }
	       else
	       {
	           flag = -1;
	       }	      
	   }
	   else
	   {
	       flag = -1;
	   }
	}
     }
     else
     {
	double delta1 = (3*b*b-8*a*c+4*a*z)/3;
 	if (delta1 >= 0)
	{
	   double m = b*b*b-4*a*b*c+8*a*a*d;
	   double delta20 =(6*b*b-16*a*c-4*a*z)/3 + 2*m/(sqrt(delta1));
	   double delta21 =(6*b*b-16*a*c-4*a*z)/3 - 2*m/(sqrt(delta1));
	//x[0] = (-b - sqrt(delta1) +  sqrt(delta20))/(4*a)
	//x[1] = (-b - sqrt(delta1) -  sqrt(delta20))/(4*a)
	//x[2] = (-b + sqrt(delta1) +  sqrt(delta21))/(4*a)
	//x[3] = (-b + sqrt(delta1) -  sqrt(delta21))/(4*a)
	   if (m >= 0) //delta20>=delta21
	   {
	      if (delta21>=0)//4个实根
	      {
		x[0] = (-b - sqrt(delta1) +  sqrt(delta20))/(4*a);
		x[1] = (-b - sqrt(delta1) -  sqrt(delta20))/(4*a);
		x[2] = (-b + sqrt(delta1) +  sqrt(delta21))/(4*a);
		x[3] = (-b + sqrt(delta1) -  sqrt(delta21))/(4*a);
		if (x[1] > 0)
		{
		   flag = 1;
		}
		else 
		{
		   if (x[3] > 0)//x[3]一定比x[2]小
		   {
		     if ( (x[0] < x[3]) && (x[0] > 0)
		     {
			flag = 0;
		     }
		     else
		     {
			flag =3;
		     }
		   }
		   else
		   {
		     if (x[0] > 0)
		     {
		 	if ((x[2]<x[0]) && (x[2] > 0))
			{
			   flag
			}
   		     }
		   }
		}
	      }
	      else if(delta20>=0)//2个实根
	      {
		x[0] = (-b - sqrt(delta1) +  sqrt(delta20))/(4*a);
		x[1] = (-b - sqrt(delta1) -  sqrt(delta20))/(4*a);
		if (x[1] > 0)
		{
		   flag = 1;
		}
		else if (x[0] > 0)
		{
		   flag = 0;
		}
		else
		{
		   flag = -1;
		}
	      }
	      else 
	      {
		flag = -1;
	      }
	   }
	   else // delta21 > delta20
	   {
	      if (delta20>=0)//4个实根
	      {
		x[0] = (-b - sqrt(delta1) +  sqrt(delta20))/(4*a);
		x[1] = (-b - sqrt(delta1) -  sqrt(delta20))/(4*a);
		x[2] = (-b + sqrt(delta1) +  sqrt(delta21))/(4*a);
		x[3] = (-b + sqrt(delta1) -  sqrt(delta21))/(4*a);
		
	      }
	      else if(delta21>=0)//2个实根
	      {
		x[2] = (-b + sqrt(delta1) +  sqrt(delta21))/(4*a);
		x[3] = (-b + sqrt(delta1) -  sqrt(delta21))/(4*a);
		if (x[3] > 0)
		{
		   flag = 3;
		}
		else if (x[2] > 0)
		{
		   flag = 2;
		}
		else
		{
		   flag = -1;
		}
	      }
	      else 
	      {
		flag = -1;
	      }
	   }
	}
	else
	{
	  flag = -1;
	}
     }


  std::cout<<"flag: "<<flag<<std::endl;
  if (flag >= 0)
  { 
     std::cout<<"预测时间t: "<<x[flag]<<std::endl;
  }
  Simulator::Stop (Seconds (5.0));

  Simulator::Run ();

  Simulator::Destroy ();
  return 0;
}
